"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const relationship_model_1 = __importDefault(require("../models/relationship.model"));
const merge_1 = __importDefault(require("../utils/merge"));
/**
 * The {@link Relator} class is used to generate top-level [included data](https://jsonapi.org/format/#document-top-level)
 * as well as resource-level [relationships](https://jsonapi.org/format/#document-resource-object-relationships).
 *
 * Example:
 * ```typescript
 * [[include:relator.example.ts]]
 * ```
 */
class Relator {
    /**
     * Default options. Can be edited to change default options globally.
     */
    static defaultOptions = {
        linkers: {},
    };
    /**
     * Options for relator.
     */
    options;
    relatedName;
    /**
     * Creates a {@link Relator}.
     *
     * @param fetch - Fetches related data from primary data.
     * @param serializer - The `Serializer` to use for related data.
     * @param options - Options for the relator.
     */
    constructor(fetch, serializer, options = {}) {
        // Setting default options
        this.relatedName = options.relatedName || serializer.collectionName;
        this.options = (0, merge_1.default)({}, Relator.defaultOptions, options);
        this.getRelatedData = fetch;
        this.getRelatedResource = serializer.createResource.bind(serializer);
        this.getRelatedIdentifier = serializer.createIdentifier.bind(serializer);
        this.getRelatedRelators = serializer.getRelators.bind(serializer);
    }
    /** @internal Gets related data from primary data. */
    getRelatedData;
    /** @internal Gets related relators */
    getRelatedRelators;
    /** @internal Creates related identifiers */
    getRelatedIdentifier;
    /** @internal Creates related resources */
    getRelatedResource;
    /** @internal Gets related links from primary data and related data */
    getRelatedLinks(data, relatedData) {
        let links;
        if (this.options.linkers.relationship) {
            links = { ...links, self: this.options.linkers.relationship.link(data, relatedData) };
        }
        if (this.options.linkers.related) {
            links = { ...links, related: this.options.linkers.related.link(data, relatedData) };
        }
        return links;
    }
    /** @internal Gets related meta from primary data and related data */
    getRelatedMeta(data, relatedData) {
        let meta;
        if (this.options.metaizer) {
            meta = this.options.metaizer.metaize(data, relatedData);
        }
        return meta;
    }
    /** @internal Creates a {@link Relationship}. */
    async getRelationship(data, relatedDataCache) {
        // Initialize options.
        const relationshipOptions = {};
        // Get related data.
        const relatedData = await this.getRelatedData(data);
        if (relatedData && relatedDataCache) {
            relatedDataCache.push(...(Array.isArray(relatedData) ? relatedData : [relatedData]));
        }
        // Get related links.
        const links = this.getRelatedLinks(data, relatedData);
        if (links)
            relationshipOptions.links = links;
        // Construct related resources.
        if (relatedData !== undefined) {
            if (relatedData === null) {
                relationshipOptions.data = null;
            }
            else {
                relationshipOptions.data = Array.isArray(relatedData)
                    ? relatedData.map((data) => this.getRelatedIdentifier(data))
                    : this.getRelatedIdentifier(relatedData);
            }
        }
        // Get meta.
        const meta = this.getRelatedMeta(data, relatedData);
        if (meta)
            relationshipOptions.meta = meta;
        return new relationship_model_1.default(relationshipOptions);
    }
}
exports.default = Relator;
//# sourceMappingURL=relator.js.map